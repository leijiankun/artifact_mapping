//= require jquery
//= require d3.min
//= require jquery-ui

var mapping_panel = new (function(){
	//properties
	var _panel;
	var _svg;
	var _db_container;
	this._artifact_node = null;
	this._db_item = null;

	//methods
	this.updateArtifact = function(d){
		_panel.show("slide", { direction: "down" }, 500);

		this._artifact_node = d;

		//clear up
		_svg.html("");

		//create selected
		var g = _svg	
					.append("g")
					.attr("transform", "translate(200,40)");

		if(d.type == "artifact"){
			g
				.append("use")
				.attr("xlink:href", "<%= asset_path('artifact_icon.svg')%>#icon")
				.attr("y", 0)
				.attr("x", -55)
				.attr("text-anchor","end")
				.attr("transform", "scale(1,1)");

		}else if(d.type == "artifact_n"){
			g
				.append("use")
				.attr("xlink:href", "<%= asset_path('artifact_n_icon.svg')%>#icon")
				.attr("y", 0)
				.attr("x", -75)
				.attr("transform", "scale(1,1)");

		}else if(d.type == "key"){
			g
				.append("use")
				.attr("xlink:href", "<%= asset_path('key_icon.svg')%>#icon")
				.attr("y", 0)
				.attr("x", -50)
				.attr("transform", "scale(1,1)");
			
		}else{ //node
			g.attr("class", "node");
			g
				.append("circle")
				.attr("r", 20)
				.attr("cx", -30)
				.attr("cy", 25)
				.attr("fill", "none");
		}

		g
			.append("text")
			.attr("class", "name")
			.attr("text-anchor", "start")
			.attr("x", 0)
			.attr("y", 25)
			.text(d.name);
	}

	this.updateDatabase = function(db){
		if(db.length<1)return;
		this._db_item = db[0];
		_panel.show("slide", { direction: "down" }, 500);
		_db_container.show();
		_db_container.find(".db_name h3").text(db[0].table_comment+" "+db[0].table);
		
		_db_container.find(".column-name").text(db[0].column.name);
		_db_container.find(".column-type").text(db[0].column.type);
		_db_container.find(".column-comment").text(db[0].column.comment);
			
	}

	this.doMapping = function(evt){
		var node = evt.data._artifact_node;
		var db = evt.data._db_item;

		if(!node||!db)
			return;
		
		if(!evt.data.checkIfMappable(node, db))
			return;

		var p = findParentArtifact(node);
		var rule = {};
		if(node.type == "key"){
			if(!findParentArtifact(p)){ 
				p.mapped = true;
				p.mr = {
					table: db.table
				};
				node.mapped = true;
				node.mr = {
					table: db.table,
					column: db.column.name
				};
				rule = {
					node: node,
					parent_artifact: p,
					db: db,
					rule_text: 	"[key]"+p.name+"."+node.name+"@"+
								db.table+"."+db.column.name+""
				};
			}
		}else if(node.type=="other"){
			node.mapped = true;
			node.mr = db;
			rule = {
				node: node,
				parent_artifact: p,
				db: db,
				rule_text: 	"[attribute]"+p.name+"(key="+findArtifactKeyNode(p).name+")."+node.name+"@"+
							p.mr.table+"(PK="+findArtifactKeyNode(p).mr.column+")."+db.column.name
			};
		}else if(node.type=="artifact"){
			node.mapped = true;
			node.mr = {
				table: db.column.reference[0].table,
				fk:	db
			};
			var key = findArtifactKeyNode(node);
			key.mapped = true;
			key.mr = db.column.reference[0];
			key.mr.column = key.mr.columns[0]; // to fix
			console.log("db",db);
			rule = {
				node: node,
				parent_artifact: p,
				db: db,
				rule_text: 	"[artifact 1-1]"+p.name+"."+findArtifactKeyNode(p).name+"->"+
							node.name+"."+findArtifactKeyNode(node).name+"@"+
							db.table+"."+db.column.name+"->"+
							db.column.reference[0].table+"."+db.column.reference[0].columns[0] 
			}
		}else if(node.type=="artifact_n"){
			node.mapped = true;
			node.mr = {
				table: db.table,
				fk:	db
			};
			
			var key = findArtifactKeyNode(node);
			key.mapped = true;
			key.mr = {
				table: db.table,
				column: db.column.name
			};

			rule = {
				node: node,
				parent_artifact: p,
				db: db,
				rule_text: 	"[artifact 1-n]"+p.name+"."+findArtifactKeyNode(p).name+"->"+
							node.name+"."+findArtifactKeyNode(node).name+"@"+
							db.table+"."+db.column.name+"<-"+
							db.column.reference[0].table+"."+db.column.reference[0].columns[0]
			}
		}

		

		//do the view updates
		var rid = getRuleIndexById(node.id);
		if(rid>=0){
			mapping_rules[rid] = rule;

		}else {
			
			rid = mapping_rules.length;
			mapping_rules.push(rule);
			
			$("#menu-btn-rules").text("查看Mapping Rules("+mapping_rules.length+")");
		}

		//draw the link between arti-tree node to table item
		mapping_rules_manager.addLink(node, db, rid);

		//update TREE, modify later
		update(root);
	}

	var getTableIndex = function(t){
		for(var i=0;i<table_data.length;i++){
			if(table_data[i].table == t)
				return i;
		}
		return -1;
	}


	var getColumnIndex = function(c, t){
		for(var i=0;i<t.columns.length;i++){
			if(t.columns[i].name == c)
				return i;
		}
		return -1;
	}

	var getRuleIndexById = function(id){
		for(var i=0;i<mapping_rules.length;i++){
			if(mapping_rules[i].node.id == id)
				return i;
		}
		return -1;
	}

	var findArtifactKeyNode = function(d){
		var c = null;
		if(d.children){
			c = d.children;
		}else if(d._children){
			c = d._children;
		}else{
			return null;
		}

		for(var i=0;i<c.length;i++){
			if(c[i].type=="key")
				return c[i];
		}

		return null;
	}

	var findParentArtifact = function(d){
		var p = d.parent;
		if(!p)
			return null;
		while(p&&p.type != "artifact"&&p.type!="artifact_n"){
			p = p.parent;
		}
		return p;
	};

	this.checkIfMappable = function(node, db){
		/*	3 major types of node here:
				1 artifact 1-1		
				2 key/attribute
				3 artifact 1-n
		*/
		console.log("db:",db);
		console.log("node:",node);

		if(node.parent) {		//not root?
			var p = findParentArtifact(node);
			if(node.type == "key"){		//id?
				var pp = findParentArtifact(p);
				if(pp){		//sub artifact?
					if(!pp.mapped) 	//parent artifact must be mapped
						return false;
					if(!db.column.primary_key)		// must map to primary key
						return false;
					// TODO: check if db has foreign key to its parent

					return false;
				}else {		// main artifact
					if(!db.column.primary_key)
						return false;
					return true;
				}
			}else if (node.type == "artifact"){
				if(!db.column.foreign_key)
					return false;
				if(!p.mapped)
					return false;
				if(p.mr.table!=db.table) 
					return false;
				return true;
			}else if (node.type == "artifact_n"){
				if(!db.column.foreign_key)
					return false;
				if(!p.mapped)
					return false;
				if(p.mr.table!=db.column.reference[0].table) 
					return false;
				return true;
			}else if(node.type == "other"){	//attribute node
				if(!p.mapped)
					return false;
				if(p.mr.table!=db.table) // must map into same table 
					return false;
				return true;
			}
		}else {
			return false; //ignore root
		}

		return false; 
	}

	this.init = function(){
		_svg = d3.select("#mapping_panel div#map-artifact svg");
		_db_container = $("#mapping_panel div#map-database");
		_panel = $("#mapping_panel");
		_panel.hide();
		_db_container.hide();

		$("#mapping_panel #map-button").click(this, this.doMapping);
	}


});

//do init after render
$(document).ready(function(){
	mapping_panel.init();
});